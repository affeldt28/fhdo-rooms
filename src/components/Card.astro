---
import KeyIcon from '@components/KeyIcon.astro';
import { API_URL, URL_PLACEHOLDER, type RoomInfo, type FhDoEvent, ACCEPT_JSON, ROOM_FREE, timeFromTo, ACCEPT_HTML } from '@utils/rooms';
import LockIcon from '@components/LockIcon.astro';

export interface Props {
	room: RoomInfo;
}

const { room } = Astro.props;
const href = API_URL.replace(URL_PLACEHOLDER, room.roomId) + ACCEPT_HTML
---

<a
	href={href}
	class='p-4 border-[3px] border-black hover:border-orange-400 hover:text-orange-400 sm:min-h-[10rem]'
	data-roomId={room.roomId}
>
	<div class='flex justify-between'>
		<h3 class='text-2xl font-bold mb-4'>{room.roomId}</h3>{
			room.eKey &&
				(room.eKey.student ? (
					<KeyIcon />
				) : (
					<LockIcon />
				))
		}
	</div>
	<p>
		{room.title}
	</p>
	<span class='block pb-4'></span>
		<p class='current-timeSlot'></p>
		<p class='current-event'></p>
</a>
<script define:vars={{ API_URL, URL_PLACEHOLDER, ACCEPT_JSON, ROOM_FREE, room }}>

/**
 * Add a colon to a time string formatted like `hhmm`
 * @param {string} time
 * @returns Time string as `hh:mm`
 */
function addColon(time) {
	return time.substring(0, 2) + ':' + time.substring(2, 4);
}

/**
 * Format time input
 * @param {string} from `hhmm` or `hh:mm`
 * @param {string} to `hhmm` or `hh:mm`
 * @return Time string as `hh:mm - hh:mm`
 */
function timeFromTo(from, to) {
	let time = '';

	if (from.match(/[0-9]{2}:[0-9]{2}/)) time += from;
	else if (from.match(/[0-9]{4}/)) time += addColon(from);
	else time += from;

	time += ' - ';

	if (to.match(/[0-9]{2}:[0-9]{2}/)) time += to;
	else if (to.match(/[0-9]{4}/)) time += addColon(to);
	else time += to;

	return time;
}

fetch(API_URL.replace({ URL_PLACEHOLDER }, room.roomId) + ACCEPT_JSON).then(async (reponse) => {
	const events = await reponse.json();
	const currentTimeSlot = document.querySelector('.current-timeSlot');
	const currentEvent = document.querySelector('.current-event');

	if (!currentTimeSlot || !currentEvent) {
		return;
	}

	if (events == undefined || events.length == 0) {
		currentTimeSlot.innerHTML = ROOM_FREE;
		return;
	}

	const next = events[0];
	const today = new Date();
	const beginn = new Date(next.timestampBegin * 1000);
	const end = new Date(next.timestampEnd * 1000);

	if (
		beginn.getFullYear() == today.getFullYear() &&
		beginn.getMonth() == today.getMonth() &&
		beginn.getDate() == today.getDate()
	) {
		// check current date
		if (beginn.getHours() <= today.getHours()) {
			// hat schon angefangen
			if (end.getHours() >= today.getHours()) {
				// angefangen aber nicht zu ende
				currentTimeSlot.innerHTML = timeFromTo('Jetzt', next.timeEnd);
				currentEvent.innerHTML = next.name;
			}
		} else {
			// noch nicht angefangen
			currentTimeSlot.innerHTML = timeFromTo(next.timeBegin, next.timeEnd);
			currentEvent.innerHTML = next.name;
		}
	} else {
		currentTimeSlot.innerHTML = ROOM_FREE;
	}
});
</script>
